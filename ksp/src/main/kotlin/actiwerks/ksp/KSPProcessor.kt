package actiwerks.ksp


import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.KSAnnotated
import java.io.OutputStream

class KSPProvider : SymbolProcessorProvider {
    override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor {
        return KSPProcessor(environment)
    }

}
class KSPProcessor constructor(private val environment: SymbolProcessorEnvironment): SymbolProcessor {
    private val logger: KSPLogger = environment.logger
    private val codeGenerator = environment.codeGenerator

    private var generated = false

    override fun process(resolver: Resolver): List<KSAnnotated> {
        logger.warn("Processing KSP, file count: ${environment.codeGenerator.generatedFile.size} info: ${environment.options} platforms: ${environment.platforms}")

        // Note: neither of these is not printed to the standard build console, you need to tweak the run settings or use warning instead
        logger.info("Processing KSP Info")
        logger.logging("Processing KSP logging")

        if (!generated) {

            val packageName = "actiwerks.ksp"
            val file: OutputStream = codeGenerator.createNewFile(
                dependencies = Dependencies(false, *resolver.getAllFiles().toList().toTypedArray()),
                packageName = packageName,
                fileName = "ExampleGenerated"
            )
            val fileContent = """
package actiwerks.ksp

object ExampleGenerated {
    fun generatedMessage() : String {
        return "I am generated by KSP"
    }
}
    """.trimIndent()

            file += fileContent
            file.close()
            generated = true
        }
        return emptyList()
    }

    operator fun OutputStream.plusAssign(str: String) {
        this.write(str.toByteArray())
    }
}